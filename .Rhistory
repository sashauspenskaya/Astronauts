4, 7, 3.5,
5, 6, 3,
6, 5, 2.5,
7, 4, 2,
8, 3, 1.5,
9, 2, 1,
10, 1, 0.5
) -> df
df
map_df(df, IQR)
quad <- function(a, b, c) {
soln <- b^2-4*a*c
# Check if the discriminant is non-negative for real solutions
if (soln >= 0) {
# Calculate the two solutions using the quadratic formula
root <- (-b + sqrt(delta)) / (2 * a)
root1 <- (-b - sqrt(delta)) / (2 * a)
# Return a vector containing the solutions
return(c(root1, root2))
} else {
# If the discriminant is negative, return an error message
return("No real number solutions")
quad <- function(a, b, c) {
delta <- b^2 - 4 * a * c
quad <- function(a, b, c) {
soln <- b^2-4*a*c
# Check if the discriminant is non-negative for real solutions
if (soln >= 0) {
# Calculate the two solutions using the quadratic formula
root <- (-b + sqrt(soln)) / (2 * a)
root1 <- (-b - sqrt(soln)) / (2 * a)
# Return a vector containing the solutions
return(c(root, root1))
} else {
# If the discriminant is negative, return an error message
return("No real number solutions")
quad <- function(a, b, c) {
delta <- b^2 - 4 * a * c
quad <- function(a, b, c) {
soln <- b^2-4*a*c
if (soln >= 0) {
# Calculate the two solutions using the quadratic formula
root <- (-b + sqrt(soln)) / (2 * a)
root1 <- (-b - sqrt(soln)) / (2 * a)
return(c(root, root1))
} else {
# If the discriminant is negative, return an error message
return("No real number solutions")
}
}
quad <- function(a, b, c) {
soln <- b^2-4*a*c
if (soln >= 0) {
# Calculate the two solutions using the quadratic formula
root <- (-b + sqrt(soln)) / (2 * a)
root1 <- (-b - sqrt(soln)) / (2 * a)
return(c(root, root1))
} else {
# If the discriminant is negative, return an error message
return("No real number solutions")
}
}
quad(1,-3,-28)
quad(1,1,-30)
quad(3,14,8)
quad(2,11,-6)
quad <- function(a, b, c) {
soln <- b^2-4*a*c
root <- (-b + sqrt(soln)) / (2 * a)
root1 <- (-b - sqrt(soln)) / (2 * a)
return(c(root, root1))
}
quad(1,-3,-28)
knitr::opts_chunk$set(echo = TRUE)
Vector1[Vector1 %% 2 != 0 & Vector1 %% 3 != 0]
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
Vector1 <- (c( 10, 19, 121, 83, 63, 7, 77, 61, 51, 97, 123, 41))
Vector1
Vector1[c(1,12)]
Vector1[c(-2,-3,-4,-5,-6,-7,-8,-9,-10,-11)]
Vector1[c(1,2,6,9,12)]
Vector1[Vector1<60]
Vector1[Vector1 %% 2 != 0 & Vector1 %% 3 != 0]
for (i in 1:12){
if (Vector1[i]%% 2 != 0 & Vector1[i]%% 3 != 0){
print(Vector1[i])
}
Vector1[Vector1 %% 2 != 0 & Vector1 %% 3 != 0]
for (i in 1:12){
if (Vector1[i]%% 2 != 0 & Vector1[i]%% 3 != 0){
print(Vector1[i])
}
}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
x <- list(2, 4, 5, 9, 1)
y <- list(8, 7, 2, 8, 3)
z <- list(1, 8, 5, 4, 2)
library(tidyverse)
x <- list(12, 14, 15, 18, 19)
x
y <- list(8, 14, 20, 22, 30)
y
# Finding iterative sums
map2(x,y, ~ .x + .y)
map2_dbl(x,y, ~ .x + .y)
# or
map2_dbl(x,y,  `+`)
x <- list(12, 14, 15, 18, 19)
# Finding iterative sums
map2(x,y, ~ .x + .y)
map2_dbl(x,y, ~ .x + .y)
x <- list(2, 4, 5, 9, 1)
y <- list(8, 7, 2, 8, 3)
z <- list(1, 8, 5, 4, 2)
map2_dbl(x,y,z, ~ (.x+.y+.z)^2)
pmap_dbl(list(x,y,z), function(first + second + third)^2)
pmap_dbl(list(x,y,z), function(first + second + third)^2)
pmap_dbl(list(x,y,z), function(first, second, third) (first + second + third)/3)
tribble( ~Student, ~Gender, ~Salary,
"John", "Male", 65000,
"Alice", "Female", 73000,
"Juan", "Male", 66000,
"Beth", "Female", 71500,
"Denise", "Female", 82000
) -> table
table
tribble( ~Student,  ~Gender, ~Age,
"John",   "Male",    20,
"Alice",  "Female",  24,
"Juan",   "Male",    21,
"Beth",   "Female",  19,
"Denise", "Female",  22
) -> A
A
A %>%
pmap_chr(~ str_glue("The student {..1} is a {..2} who is {..3} years old."))
table %>%
pmap_chr(~ str_glue("{..1} who is a {..2}, has a salary that is {..3} dollars per year."))
# John who is Male, has a salary that is 65000 dollars per year.
tribble( ~mean, ~sd,  ~n,
5,       1,   15,
10,      5,   10,
-3,      10,  20
) -> parameters
parameters
pmap(parameters, rnorm)
i <- 1
while (i < 6) {
print(i)
i = i+1
}
# Initialize a 5 by 5 matrix with zeros
matrix_result <- matrix(0, nrow = 5, ncol = 5)
# Nested loop to calculate sums of corresponding columns and rows
for (i in 1:5) {
for (j in 1:5) {
matrix_result[i, j] <- sum(mat[, i]) + sum(mat[j, ])
}
}
i <- 1
while (i^2 < 100) {
print(i)
i = i+1
}
# Write a for loop that uses the break command to
# end outputs values after 6 values
x <- 1:11
for (val in x) {
if (val == 7){
break
}
print(val)
}
x <- 1:11
for (val in x) {
if (val == 7){
next
}
print(val)
}
data <- data.frame(x1 = 10:15,    # Create example data
x2 = 66:71,
x3 = 14:19)
data                            # Print example data
for(i in 1:ncol(data2)) {       # for-loop over columns
data2[ , i] <- data2[ , i] + 5
}
data2
data2 <- data                   # Replicate example data
data2
for(i in 1:ncol(data2)) {       # for-loop over columns
data2[ , i] <- data2[ , i] + 5
}
data2
for (k in 1:3) {
for (l in 1:2) {
print(paste("k =", k, "l = ", l))
}
}
for(i in 1:4)
{
for(j in 1:4)  # Interpretation: 1*1, 1*2, 1*3, 1*4, 2*1, 2*2, 2*3,
#...4*1,4*2,4*3,4*4
{
print(i*j)
}
}
num_vector<-c(1,2,3)
num_vector
alpha_vector<-c("a", "b", "c")
alpha_vector
for(num in num_vector) { # outer loop
print(num)
for(letter in alpha_vector) # inner loop
print(letter)
}
matrix1 = matrix(nrow=4, ncol=4) # create a 4 x 4 matrix(4 rows and 4 columns)
for(i in 1:nrow(matrix1))        #// Assigned a variable 'i' for each row
{
for(j in 1:ncol(matrix1))      #// Assigned a variable 'j' for each column
{
matrix1[i,j] = i*j           #// calculating product of two indeces
}
}
print(matrix1)
z <- matrix( nrow = 3, ncol = 3)
for (m in 1:3) {
for (n in 1:3) {
z[m, n] <- -1*(m + n)
}
}
print(z)
q()
z <- matrix( nrow = 3, ncol = 3)
for (m in 1:3) {
for (n in 1:3) {
z[m, n] <- -1*(m + n)
}
}
print(z)
knitr::opts_chunk$set(echo = TRUE)
z <- matrix( nrow = 5, ncol = 5)
for (m in 1:5) {
for (n in 1:5) {
z[m, n] <- -1*(m + n)
}
}
print(z)
print(matrix1)
z <- matrix( nrow = 5, ncol = 5)
for (m in 1:5) {
for (n in 1:5) {
z[m, n] <- 1*(m + n)
}
}
print(z)
mu <-list(5, 10, -3)
sigma <-list(1, 5, 10)
map2(mu, sigma, rnorm, n = 5)%>%
str()
x <- list(12, 14, 15, 18, 19)
x
y <- list(8, 14, 20, 22, 30)
y
z <- list(10, 18, 28, 34, 40)
z
pmap_dbl(list(x,y,z), sum)
# Iteratively find minimum values
pmap_dbl(list(x,y,z), min)
# Find the means
pmap_dbl(list(x,y,z), function(first, second, third) (first + second + third)/3)
tribble( ~Student,  ~Gender, ~Age,
"John",   "Male",    20,
"Alice",  "Female",  24,
"Juan",   "Male",    21,
"Beth",   "Female",  19,
"Denise", "Female",  22
) -> A
A
A %>%
pmap_chr(~ str_glue("The student {..1} is a {..2} who is {..3} years old."))
A %>%
pmap_chr(~ str_glue("{..1} is a {..2} whose age is {..3}"))
tribble( ~mean, ~sd,  ~n,
5,       1,   15,
10,      5,   10,
-3,      10,  20
) -> parameters
library(tidyverse)
tribble( ~Student,  ~Gender, ~Age,
"John",   "Male",    20,
"Alice",  "Female",  24,
"Juan",   "Male",    21,
"Beth",   "Female",  19,
"Denise", "Female",  22
) -> A
A
A %>%
pmap_chr(~ str_glue("The student {..1} is a {..2} who is {..3} years old."))
A %>%
pmap_chr(~ str_glue("{..1} is a {..2} whose age is {..3}"))
tribble( ~mean, ~sd,  ~n,
5,       1,   15,
10,      5,   10,
-3,      10,  20
) -> parameters
parameters
pmap(parameters, rnorm)
i <- 1
while (i < 6) {
print(i)
i = i+1
}
# Write a for loop that uses the break command to
# end outputs values after 6 values
x <- 1:11
for (val in x) {
if (val == 7){
break
}
print(val)
}
j <- 1:20
for (val in j) {
if (val == 5 & val==10){
next
}
print(val)
}
x <- 1:11
for (val in x) {
if (val == 7){
next
}
print(val)
}
x <- 1:11
for (val in x) {
if (val == 7){
next
}
print(val)
}
x <- 1:20
for (val in x) {
if (val == 5){
next
}
print(val)
}
x <- 1:20
for (val in x) {
if (val == 5 & val==10){
next
}
print(val)
}
x <- 1:20
for (val in x) {
if (val == 5 && val==10){
next
}
print(val)
}
x <- 1:20
for (val in x) {
if (val == 5 & val == 10){
next
}
print(val)
}
x <- 1:20
for (val in x) {
if (val == 5){
next
}
if (val==10){
next
}
print(val)
}
table %>%
pmap_chr(~ str_glue("{..1} who is a {..2}, has a salary that is {..3} dollars per year."))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
x <- list(2, 4, 5, 9, 1)
y <- list(8, 7, 2, 8, 3)
z <- list(1, 8, 5, 4, 2)
x <- list(12, 14, 15, 18, 19)
x
y <- list(8, 14, 20, 22, 30)
y
z <- list(10, 18, 28, 34, 40)
z
pmap_dbl(list(x,y,z), sum)
# Iteratively find minimum values
pmap_dbl(list(x,y,z), min)
# Find the means
pmap_dbl(list(x,y,z), function(first, second, third) (first + second + third)/3)
# Calculate output for a specialized function
pmap_dbl(list(x,y,z), function(first, second, third) 2*first + second + third)
pmap_dbl(list(x,y,z), function(first, second, third) (first + second + third)^2
pmap_dbl(list(x,y,z), function(first, second, third) (first + second + third)^2)
x <- list(2, 4, 5, 9, 1)
y <- list(8, 7, 2, 8, 3)
z <- list(1, 8, 5, 4, 2)
pmap_dbl(list(x,y,z), function(first, second, third) (first + second + third)^2)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
nrow(iris)
nrow(iris)
map_int(iris, ~nrow(.))
U = list(10,15,"mary",22,32,"james",42)
map(U, safely(~ .x + 15))
nrow(iris)
knitr::opts_chunk$set(echo = TRUE)
U = list(10,15,"mary",22,32,"james",42)
map(U, safely(~ .x + 15))
library(tidyverse)
library(dplyr)
U = list(10,15,"mary",22,32,"james",42)
map(U, safely(~ .x + 15))
knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/sashauspenskaya/Desktop")
pmap_dbl(list(X, mean, sd), function(o, m, s) (o-m)/s)
knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/sashauspenskaya/Desktop")
library(tidyverse)
library(dplyr)
nrow(iris)
map_int(iris, ~nrow(data.frame(.)))
map(iris, n_distinct)
z <- matrix( nrow = 3, ncol = 5)
for (m in 1:3) {
for (n in 1:5) {
z[m, n] <- -1*(m -n)
}
}
print(z)
tibble(
x = rnorm(10, mean = -10),
y = rnorm(10, mean = 0),
z = rnorm(10, mean = 10),
w = rnorm(10, mean = 100)
)
tibble(
x = rnorm(10, mean = -10),
y = rnorm(10, mean = 0),
z = rnorm(10, mean = 10),
w = rnorm(10, mean = 100)
)
X <- list(12, 14, 15, 18, 19, 22,10,18,18)
Mean <- list(16, 16, 16, 16, 16,16,16,16,16)
sd <- list(2, 2, 2, 2, 2,2,2,2,2)
pmap_dbl(list(X, mean, sd), function(o, m, s) (o-m)/s)
pmap_dbl(list(X, mean, sd), function(o, m, s) (o-m)/s)
knitr::opts_chunk$set(echo = TRUE)
X <- list(12, 14, 15, 18, 19, 22,10,18,18)
mean <- list(16, 16, 16, 16, 16,16,16,16,16)
sd <- list(2, 2, 2, 2, 2,2,2,2,2)
pmap_dbl(list(X, mean, sd), function(o, m, s) (o-m)/s)
X <- list(12, 14, 15, 18, 19, 22,10,18,18)
mean <- list(16, 16, 16, 16, 16,16,16,16,16)
sd <- list(2, 2, 2, 2, 2,2,2,2,2)
pmap_dbl(list(X, mean, sd), function(o, m, s) (o-m)/s)
X <- list(12, 14, 15, 18, 19, 22,10,18,18)
mean <- list(16, 16, 16, 16, 16,16,16,16,16)
sd <- list(2, 2, 2, 2, 2,2,2,2,2)
pmap_dbl(list(X, mean, sd), function(o, m, s) (o-m)/s)
pmap_dbl(list(X, mean, sd), function(o, m, s) (o-m)/(s/sqrt(length(X))))
knitr::opts_chunk$set(echo = TRUE)
setwd("/Users/sashauspenskaya/Desktop")
library(tidyverse)
library(dplyr)
nrow(iris)
map_int(iris, ~nrow(data.frame(.)))
map(iris, n_distinct)
z <- matrix( nrow = 3, ncol = 5)
for (m in 1:3) {
for (n in 1:5) {
z[m, n] <- -1*(m -n)
}
}
print(z)
tibble(
x = rnorm(10, mean = -10),
y = rnorm(10, mean = 0),
z = rnorm(10, mean = 10),
w = rnorm(10, mean = 100)
)
tibble(
x = rnorm(10, mean = -10),
y = rnorm(10, mean = 0),
z = rnorm(10, mean = 10),
w = rnorm(10, mean = 100)
)
X <- list(12, 14, 15, 18, 19, 22,10,18,18)
mean <- list(16, 16, 16, 16, 16,16,16,16,16)
sd <- list(2, 2, 2, 2, 2,2,2,2,2)
pmap_dbl(list(X, mean, sd), function(o, m, s) (o-m)/s)
pmap_dbl(list(X, mean, sd), function(o, m, s) (o-m)/(s/sqrt(length(X))))
V = c(10,15,17,22,32,38,42)
keep(V, ~.x < 20)
discard(V,~.x<20)
U = list(10,15,"mary",22,32,"james",42)
map(U, safely(~ .x + 15))
